<?xml version="1.0"?>
<launch>
  <set_env name="ROSCONSOLE_CONFIG_FILE" value="$(find-pkg-share vrx_gazebo)/config/custom_rosconsole.conf"/>
  <!-- Gazebo world to load -->
  <arg name="world" default="$(find-pkg-share vrx_gazebo)/worlds/example_course_2019.world" />
  <!-- If true, run gazebo GUI -->
  <arg name="gui" default="true" />
  <!-- If true, run gazebo in verbose mode -->
  <arg name="verbose" default="false"/>
  <!-- If true, start in paused state -->
  <arg name="paused"  default="false"/>
  <!-- Set various other gazebo arguments-->
  <arg name="extra_gazebo_args" default=""/>
  <!-- Start in a default namespace -->
  <arg name="namespace" default="wamv"/>

  <!-- Initial USV location and attitude-->
  <arg name="x" default="158" />
  <arg name="y" default="108" />
  <arg name="z" default="0.1" />
  <arg name="P" default="0" />
  <arg name="R" default="0" />
  <arg name="Y" default="-2.76" />

  <!-- If true, show non-competition ROS topics (/gazebo/model_states, /vrx/debug/wind/direction, etc.)-->
  <arg name="non_competition_mode" default="true"/>
  <arg name="enable_ros_network" default="$(var non_competition_mode)"/>
  <set_env name="VRX_DEBUG" value="$(var non_competition_mode)"/>
  <set_env unless="$(var non_competition_mode)" name="GAZEBO_MODEL_PATH" value="$(find-pkg-share vrx_gazebo)/models:$(find-pkg-share wamv_gazebo)/models:$(find-pkg-share wamv_description)/models:$(env GAZEBO_MODEL_PATH)"/>

  <!-- Allow user specified thruster configurations
       H = stern trusters on each hull
       T = H with a lateral thruster
       X = "holonomic" configuration -->
  <arg name="thrust_config" default="H" />

  <!-- Do you want to enable sensors? -->
  <arg name="camera_enabled"       default="false" />
  <arg name="gps_enabled"          default="false" />
  <arg name="imu_enabled"          default="false" />
  <arg name="lidar_enabled"        default="false" />
  <arg name="ground_truth_enabled" default="false" />

  <!-- Start Gazebo with the world file -->
  <include file="$(find-pkg-share gazebo_ros)/launch/gazebo.launch.py">
    <arg name="world"   value="$(var world)"/>
    <arg name="verbose" value="$(var verbose)"/>
    <arg name="pause"   value="$(var paused)"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui"     value="$(var gui)"/>
    <arg name="enable_ros_network" value="$(var enable_ros_network)"/>
    <arg name="extra_gazebo_args" value="$(var extra_gazebo_args)"/>
  </include>

  <!-- Load robot model -->
  <arg name="urdf" default="$(find-pkg-share wamv_gazebo)/urdf/wamv_gazebo.urdf.xacro"/>
  <arg name="generated_urdf" default="$(find-pkg-share wamv_gazebo)/urdf/robot_description"/>
  <arg name="cmd" 
        default="$(exec-in-pkg xacro xacro) '$(var urdf)' > $(var generated_urdf)
        thruster_config:=$(var thrust_config)
        camera_enabled:=$(var camera_enabled)
        gps_enabled:=$(var gps_enabled)
        imu_enabled:=$(var imu_enabled)
        lidar_enabled:=$(var lidar_enabled)
        ground_truth_enabled:=$(var ground_truth_enabled)
        namespace:=$(var namespace)"/>

  <executable cmd="$(var cmd)" name="robot_description" output="screen" shell="true" />

  <!-- Spawn model in Gazebo, script depending on non_competition_mode -->
  <group if="$(var non_competition_mode)">

    <!-- Spawn model in Gazebo -->
    <node name="spawn_entity" pkg="gazebo_ros" exec="spawn_entity.py" respawn="false" output="screen"
          args="-x $(var x) -y $(var y) -z $(var z) 
                -R $(var R) -P $(var P) -Y $(var Y) 
                -entity $(var namespace) -file $(var generated_urdf)"/>
  </group>

  <group unless="$(var non_competition_mode)">
    <!-- Spawn model with script -->
    <node name="spawn_wamv" pkg="vrx_gazebo" exec="spawn_wamv.bash" output="screen"
          args="-x $(var x) -y $(var y) -z $(var z) 
                -R $(var R) -P $(var P) -Y $(var Y) 
                --urdf $(var urdf) --model wamv"/>
  </group>

</launch>

